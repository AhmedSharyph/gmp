<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Dynamic GMP Form</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      max-width: 600px;
      margin: 20px auto;
      padding: 20px;
      line-height: 1.6;
    }
    h1 {
      color: #333;
      text-align: center;
      margin-bottom: 30px;
      border-bottom: 2px solid #eee;
      padding-bottom: 10px;
    }
    select, button {
      width: 100%;
      padding: 12px;
      margin: 10px 0;
      font-size: 16px;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    button {
      background-color: #4CAF50;
      color: white;
      cursor: pointer;
    }
    button:hover {
      background-color: #45a049;
    }
    #status {
      margin-top: 15px;
      padding: 10px;
      border-radius: 4px;
    }
    #status.success { background-color: #d4edda; color: #155724; }
    #status.error { background-color: #f8d7da; color: #721c24; }
  </style>
</head>
<body>

  <h1 id="dynamic-header">Loading survey title...</h1>

  <select id="dropdown" name="selectedValue" required>
    <option value="">-- Loading options... --</option>
  </select>

  <button type="button" onclick="submitForm()">Submit Selection</button>

  <div id="status"></div>

  <script>
    const GAS_URL = 'https://script.google.com/macros/s/AKfycbwnF-1bg34_8O1z-BrfS-9-Wt24uukvOYTEduNRav0FoRSuEvr-EbgeFVkTO7_HAIJw/exec';

    // Load header/title
    async function loadHeader() {
      const headerEl = document.getElementById('dynamic-header');
      headerEl.textContent = 'Fetching survey title...';
      try {
        const res = await fetch(`${GAS_URL}?method=getHeader`);
        const data = await res.json();
        headerEl.textContent = data.title || 'GMP Form';
        headerEl.style.color = '#2c3e50';
      } catch (err) {
        console.error(err);
        headerEl.textContent = 'GMP Form (Error loading title)';
        headerEl.style.color = '#e74c3c';
      }
    }

    // Load dropdown options
    async function loadOptions() {
      const status = document.getElementById('status');
      status.textContent = 'Fetching options...';
      status.className = '';

      try {
        const res = await fetch(`${GAS_URL}?method=getOptions`);
        const options = await res.json();

        const dropdown = document.getElementById('dropdown');
        dropdown.innerHTML = '<option value="">-- Select an option --</option>';

        options.forEach(opt => {
          const el = document.createElement('option');
          el.value = opt;
          el.textContent = opt;
          dropdown.appendChild(el);
        });

        status.textContent = '✅ Options loaded!';
        status.className = 'success';
      } catch (err) {
        console.error(err);
        status.textContent = `❌ Failed to load options: ${err.message}`;
        status.className = 'error';
      }
    }

    // Submit form using fetch
    async function submitForm() {
      const dropdown = document.getElementById('dropdown');
      const selectedValue = dropdown.value;
      const status = document.getElementById('status');

      if (!selectedValue) {
        status.textContent = 'Please select an option!';
        status.className = 'error';
        return;
      }

      status.textContent = 'Submitting...';
      status.className = '';

      try {
        const res = await fetch(`${GAS_URL}?selectedValue=${encodeURIComponent(selectedValue)}`);
        const data = await res.json();

        if (data.success) {
          status.textContent = '✅ Submission saved!';
          status.className = 'success';
          dropdown.value = ''; // reset dropdown
        } else {
          throw new Error(data.message || 'Submission failed');
        }
      } catch (err) {
        console.error(err);
        status.textContent = `❌ ${err.message}`;
        status.className = 'error';
      }
    }

    // Run on page load
    window.addEventListener('DOMContentLoaded', async () => {
      await loadHeader();
      await loadOptions();
    });
  </script>


// ===== Google Apps Script (Code.gs) =====

const SHEET_ID = '1vGsJoi6pb9T9Zz_4IgFmrY0oSJ_HwJx3Kek9wNE6UQc';
const OPTIONS_SHEET_NAME = 'hcf_list';   // Sheet with dropdown options
const SUBMISSIONS_SHEET_NAME = 'gmp_data'; // Sheet to store submissions
const HEADER_CELL = 'A1'; // Optional: header from hcf_list A1

// Main entry point
function doGet(e) {
  const method = e.parameter.method;

  if (method === 'getOptions') return getOptions();
  if (method === 'getHeader') return getHeader();
  if (e.parameter.selectedValue) return saveSubmission(e.parameter.selectedValue);

  return ContentService.createTextOutput('No method specified');
}

// Fetch header/title
function getHeader() {
  const ss = SpreadsheetApp.openById(SHEET_ID);
  let sheet = ss.getSheetByName(OPTIONS_SHEET_NAME);
  let title = 'GMP Form';
  if (sheet) {
    const val = sheet.getRange(HEADER_CELL).getValue();
    if (val) title = val;
  }
  return ContentService
    .createTextOutput(JSON.stringify({ title }))
    .setMimeType(ContentService.MimeType.JSON);
}

// Fetch dropdown options from hcf_list
function getOptions() {
  const ss = SpreadsheetApp.openById(SHEET_ID);
  const sheet = ss.getSheetByName(OPTIONS_SHEET_NAME);
  if (!sheet) return ContentService.createTextOutput(JSON.stringify([])).setMimeType(ContentService.MimeType.JSON);

  const values = sheet.getRange('A:A').getValues();
  const options = values.flat().filter(v => v).map(v => v.toString());

  return ContentService
    .createTextOutput(JSON.stringify(options))
    .setMimeType(ContentService.MimeType.JSON);
}

// Save submitted value to gmp_data
function saveSubmission(selectedValue) {
  const ss = SpreadsheetApp.openById(SHEET_ID);
  let sheet = ss.getSheetByName(SUBMISSIONS_SHEET_NAME);

  if (!sheet) {
    sheet = ss.insertSheet(SUBMISSIONS_SHEET_NAME);
    sheet.appendRow(['Timestamp', 'Selected Value']);
  }

  sheet.appendRow([new Date(), selectedValue]);

  return ContentService
    .createTextOutput(JSON.stringify({ success: true, message: 'Submission saved!' }))
    .setMimeType(ContentService.MimeType.JSON);
}


</body>
</html>
